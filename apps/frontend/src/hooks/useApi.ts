/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Blockwise API
 * API for copropri√©t√© management
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

export interface CreateResidenceDto {
  [key: string]: unknown;
}

export interface UpdateResidenceDto {
  [key: string]: unknown;
}

export interface CreateUserDto {
  [key: string]: unknown;
}

export interface UpdateUserDto {
  [key: string]: unknown;
}

export interface CreateIncidentDto {
  [key: string]: unknown;
}

export interface UpdateIncidentDto {
  [key: string]: unknown;
}

export interface CreateVoteSessionDto {
  [key: string]: unknown;
}

export interface UpdateVoteSessionDto {
  [key: string]: unknown;
}

export interface CreateDocumentDto {
  [key: string]: unknown;
}

export interface UpdateDocumentDto {
  [key: string]: unknown;
}

export interface CreateVoteDto {
  [key: string]: unknown;
}

export interface UpdateVoteDto {
  [key: string]: unknown;
}

export interface CreateAnnouncementDto {
  [key: string]: unknown;
}

export interface UpdateAnnouncementDto {
  [key: string]: unknown;
}

export const residenceControllerCreate = (
  createResidenceDto: CreateResidenceDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `http://localhost:3000/residence`,
    createResidenceDto,
    options,
  );
};

export const getResidenceControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof residenceControllerCreate>>,
    TError,
    { data: CreateResidenceDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof residenceControllerCreate>>,
  TError,
  { data: CreateResidenceDto },
  TContext
> => {
  const mutationKey = ['residenceControllerCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof residenceControllerCreate>>,
    { data: CreateResidenceDto }
  > = (props) => {
    const { data } = props ?? {};

    return residenceControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResidenceControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof residenceControllerCreate>>
>;
export type ResidenceControllerCreateMutationBody = CreateResidenceDto;
export type ResidenceControllerCreateMutationError = AxiosError<unknown>;

export const useResidenceControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof residenceControllerCreate>>,
      TError,
      { data: CreateResidenceDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof residenceControllerCreate>>,
  TError,
  { data: CreateResidenceDto },
  TContext
> => {
  const mutationOptions = getResidenceControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const residenceControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/residence`, options);
};

export const getResidenceControllerFindAllQueryKey = () => {
  return [`http://localhost:3000/residence`] as const;
};

export const getResidenceControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof residenceControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof residenceControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getResidenceControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof residenceControllerFindAll>>
  > = ({ signal }) => residenceControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof residenceControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ResidenceControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof residenceControllerFindAll>>
>;
export type ResidenceControllerFindAllQueryError = AxiosError<unknown>;

export function useResidenceControllerFindAll<
  TData = Awaited<ReturnType<typeof residenceControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof residenceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof residenceControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useResidenceControllerFindAll<
  TData = Awaited<ReturnType<typeof residenceControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof residenceControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof residenceControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useResidenceControllerFindAll<
  TData = Awaited<ReturnType<typeof residenceControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useResidenceControllerFindAll<
  TData = Awaited<ReturnType<typeof residenceControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getResidenceControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const residenceControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/residence/${id}`, options);
};

export const getResidenceControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:3000/residence/${id}`] as const;
};

export const getResidenceControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof residenceControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getResidenceControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof residenceControllerFindOne>>
  > = ({ signal }) =>
    residenceControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof residenceControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ResidenceControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof residenceControllerFindOne>>
>;
export type ResidenceControllerFindOneQueryError = AxiosError<unknown>;

export function useResidenceControllerFindOne<
  TData = Awaited<ReturnType<typeof residenceControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof residenceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof residenceControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useResidenceControllerFindOne<
  TData = Awaited<ReturnType<typeof residenceControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof residenceControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof residenceControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useResidenceControllerFindOne<
  TData = Awaited<ReturnType<typeof residenceControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useResidenceControllerFindOne<
  TData = Awaited<ReturnType<typeof residenceControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof residenceControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getResidenceControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const residenceControllerUpdate = (
  id: string,
  updateResidenceDto: UpdateResidenceDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(
    `http://localhost:3000/residence/${id}`,
    updateResidenceDto,
    options,
  );
};

export const getResidenceControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof residenceControllerUpdate>>,
    TError,
    { id: string; data: UpdateResidenceDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof residenceControllerUpdate>>,
  TError,
  { id: string; data: UpdateResidenceDto },
  TContext
> => {
  const mutationKey = ['residenceControllerUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof residenceControllerUpdate>>,
    { id: string; data: UpdateResidenceDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return residenceControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResidenceControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof residenceControllerUpdate>>
>;
export type ResidenceControllerUpdateMutationBody = UpdateResidenceDto;
export type ResidenceControllerUpdateMutationError = AxiosError<unknown>;

export const useResidenceControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof residenceControllerUpdate>>,
      TError,
      { id: string; data: UpdateResidenceDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof residenceControllerUpdate>>,
  TError,
  { id: string; data: UpdateResidenceDto },
  TContext
> => {
  const mutationOptions = getResidenceControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const residenceControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`http://localhost:3000/residence/${id}`, options);
};

export const getResidenceControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof residenceControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof residenceControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['residenceControllerRemove'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof residenceControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return residenceControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResidenceControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof residenceControllerRemove>>
>;

export type ResidenceControllerRemoveMutationError = AxiosError<unknown>;

export const useResidenceControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof residenceControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof residenceControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getResidenceControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const userControllerCreate = (
  createUserDto: CreateUserDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `http://localhost:3000/user`,
    createUserDto,
    options,
  );
};

export const getUserControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ['userControllerCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerCreate>>
>;
export type UserControllerCreateMutationBody = CreateUserDto;
export type UserControllerCreateMutationError = AxiosError<unknown>;

export const useUserControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerCreate>>,
      TError,
      { data: CreateUserDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getUserControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const userControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/user`, options);
};

export const getUserControllerFindAllQueryKey = () => {
  return [`http://localhost:3000/user`] as const;
};

export const getUserControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindAll>>
  > = ({ signal }) => userControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = AxiosError<unknown>;

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/user/${id}`, options);
};

export const getUserControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:3000/user/${id}`] as const;
};

export const getUserControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindOne>>
  > = ({ signal }) => userControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneQueryError = AxiosError<unknown>;

export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerUpdate = (
  id: string,
  updateUserDto: UpdateUserDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(
    `http://localhost:3000/user/${id}`,
    updateUserDto,
    options,
  );
};

export const getUserControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationKey = ['userControllerUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return userControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdate>>
>;
export type UserControllerUpdateMutationBody = UpdateUserDto;
export type UserControllerUpdateMutationError = AxiosError<unknown>;

export const useUserControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerUpdate>>,
      TError,
      { id: string; data: UpdateUserDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationOptions = getUserControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const userControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`http://localhost:3000/user/${id}`, options);
};

export const getUserControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['userControllerRemove'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return userControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRemove>>
>;

export type UserControllerRemoveMutationError = AxiosError<unknown>;

export const useUserControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUserControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const incidentControllerCreate = (
  createIncidentDto: CreateIncidentDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `http://localhost:3000/incident`,
    createIncidentDto,
    options,
  );
};

export const getIncidentControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof incidentControllerCreate>>,
    TError,
    { data: CreateIncidentDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof incidentControllerCreate>>,
  TError,
  { data: CreateIncidentDto },
  TContext
> => {
  const mutationKey = ['incidentControllerCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof incidentControllerCreate>>,
    { data: CreateIncidentDto }
  > = (props) => {
    const { data } = props ?? {};

    return incidentControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type IncidentControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof incidentControllerCreate>>
>;
export type IncidentControllerCreateMutationBody = CreateIncidentDto;
export type IncidentControllerCreateMutationError = AxiosError<unknown>;

export const useIncidentControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof incidentControllerCreate>>,
      TError,
      { data: CreateIncidentDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof incidentControllerCreate>>,
  TError,
  { data: CreateIncidentDto },
  TContext
> => {
  const mutationOptions = getIncidentControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const incidentControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/incident`, options);
};

export const getIncidentControllerFindAllQueryKey = () => {
  return [`http://localhost:3000/incident`] as const;
};

export const getIncidentControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof incidentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof incidentControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIncidentControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof incidentControllerFindAll>>
  > = ({ signal }) => incidentControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof incidentControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IncidentControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof incidentControllerFindAll>>
>;
export type IncidentControllerFindAllQueryError = AxiosError<unknown>;

export function useIncidentControllerFindAll<
  TData = Awaited<ReturnType<typeof incidentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof incidentControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof incidentControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIncidentControllerFindAll<
  TData = Awaited<ReturnType<typeof incidentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof incidentControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof incidentControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIncidentControllerFindAll<
  TData = Awaited<ReturnType<typeof incidentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useIncidentControllerFindAll<
  TData = Awaited<ReturnType<typeof incidentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getIncidentControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const incidentControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/incident/${id}`, options);
};

export const getIncidentControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:3000/incident/${id}`] as const;
};

export const getIncidentControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof incidentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIncidentControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof incidentControllerFindOne>>
  > = ({ signal }) =>
    incidentControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof incidentControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IncidentControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof incidentControllerFindOne>>
>;
export type IncidentControllerFindOneQueryError = AxiosError<unknown>;

export function useIncidentControllerFindOne<
  TData = Awaited<ReturnType<typeof incidentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof incidentControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof incidentControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIncidentControllerFindOne<
  TData = Awaited<ReturnType<typeof incidentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof incidentControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof incidentControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIncidentControllerFindOne<
  TData = Awaited<ReturnType<typeof incidentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useIncidentControllerFindOne<
  TData = Awaited<ReturnType<typeof incidentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof incidentControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getIncidentControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const incidentControllerUpdate = (
  id: string,
  updateIncidentDto: UpdateIncidentDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(
    `http://localhost:3000/incident/${id}`,
    updateIncidentDto,
    options,
  );
};

export const getIncidentControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof incidentControllerUpdate>>,
    TError,
    { id: string; data: UpdateIncidentDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof incidentControllerUpdate>>,
  TError,
  { id: string; data: UpdateIncidentDto },
  TContext
> => {
  const mutationKey = ['incidentControllerUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof incidentControllerUpdate>>,
    { id: string; data: UpdateIncidentDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return incidentControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type IncidentControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof incidentControllerUpdate>>
>;
export type IncidentControllerUpdateMutationBody = UpdateIncidentDto;
export type IncidentControllerUpdateMutationError = AxiosError<unknown>;

export const useIncidentControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof incidentControllerUpdate>>,
      TError,
      { id: string; data: UpdateIncidentDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof incidentControllerUpdate>>,
  TError,
  { id: string; data: UpdateIncidentDto },
  TContext
> => {
  const mutationOptions = getIncidentControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const incidentControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`http://localhost:3000/incident/${id}`, options);
};

export const getIncidentControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof incidentControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof incidentControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['incidentControllerRemove'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof incidentControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return incidentControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type IncidentControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof incidentControllerRemove>>
>;

export type IncidentControllerRemoveMutationError = AxiosError<unknown>;

export const useIncidentControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof incidentControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof incidentControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getIncidentControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const voteSessionControllerCreate = (
  createVoteSessionDto: CreateVoteSessionDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `http://localhost:3000/vote-session`,
    createVoteSessionDto,
    options,
  );
};

export const getVoteSessionControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof voteSessionControllerCreate>>,
    TError,
    { data: CreateVoteSessionDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof voteSessionControllerCreate>>,
  TError,
  { data: CreateVoteSessionDto },
  TContext
> => {
  const mutationKey = ['voteSessionControllerCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof voteSessionControllerCreate>>,
    { data: CreateVoteSessionDto }
  > = (props) => {
    const { data } = props ?? {};

    return voteSessionControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VoteSessionControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof voteSessionControllerCreate>>
>;
export type VoteSessionControllerCreateMutationBody = CreateVoteSessionDto;
export type VoteSessionControllerCreateMutationError = AxiosError<unknown>;

export const useVoteSessionControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof voteSessionControllerCreate>>,
      TError,
      { data: CreateVoteSessionDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof voteSessionControllerCreate>>,
  TError,
  { data: CreateVoteSessionDto },
  TContext
> => {
  const mutationOptions =
    getVoteSessionControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const voteSessionControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/vote-session`, options);
};

export const getVoteSessionControllerFindAllQueryKey = () => {
  return [`http://localhost:3000/vote-session`] as const;
};

export const getVoteSessionControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getVoteSessionControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof voteSessionControllerFindAll>>
  > = ({ signal }) => voteSessionControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VoteSessionControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof voteSessionControllerFindAll>>
>;
export type VoteSessionControllerFindAllQueryError = AxiosError<unknown>;

export function useVoteSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof voteSessionControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof voteSessionControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useVoteSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getVoteSessionControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const voteSessionControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/vote-session/${id}`, options);
};

export const getVoteSessionControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:3000/vote-session/${id}`] as const;
};

export const getVoteSessionControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getVoteSessionControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof voteSessionControllerFindOne>>
  > = ({ signal }) =>
    voteSessionControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VoteSessionControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof voteSessionControllerFindOne>>
>;
export type VoteSessionControllerFindOneQueryError = AxiosError<unknown>;

export function useVoteSessionControllerFindOne<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof voteSessionControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteSessionControllerFindOne<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof voteSessionControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteSessionControllerFindOne<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useVoteSessionControllerFindOne<
  TData = Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteSessionControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getVoteSessionControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const voteSessionControllerUpdate = (
  id: string,
  updateVoteSessionDto: UpdateVoteSessionDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(
    `http://localhost:3000/vote-session/${id}`,
    updateVoteSessionDto,
    options,
  );
};

export const getVoteSessionControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof voteSessionControllerUpdate>>,
    TError,
    { id: string; data: UpdateVoteSessionDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof voteSessionControllerUpdate>>,
  TError,
  { id: string; data: UpdateVoteSessionDto },
  TContext
> => {
  const mutationKey = ['voteSessionControllerUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof voteSessionControllerUpdate>>,
    { id: string; data: UpdateVoteSessionDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return voteSessionControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VoteSessionControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof voteSessionControllerUpdate>>
>;
export type VoteSessionControllerUpdateMutationBody = UpdateVoteSessionDto;
export type VoteSessionControllerUpdateMutationError = AxiosError<unknown>;

export const useVoteSessionControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof voteSessionControllerUpdate>>,
      TError,
      { id: string; data: UpdateVoteSessionDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof voteSessionControllerUpdate>>,
  TError,
  { id: string; data: UpdateVoteSessionDto },
  TContext
> => {
  const mutationOptions =
    getVoteSessionControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const voteSessionControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(
    `http://localhost:3000/vote-session/${id}`,
    options,
  );
};

export const getVoteSessionControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof voteSessionControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof voteSessionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['voteSessionControllerRemove'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof voteSessionControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return voteSessionControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VoteSessionControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof voteSessionControllerRemove>>
>;

export type VoteSessionControllerRemoveMutationError = AxiosError<unknown>;

export const useVoteSessionControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof voteSessionControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof voteSessionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getVoteSessionControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const documentControllerCreate = (
  createDocumentDto: CreateDocumentDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `http://localhost:3000/document`,
    createDocumentDto,
    options,
  );
};

export const getDocumentControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof documentControllerCreate>>,
    TError,
    { data: CreateDocumentDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof documentControllerCreate>>,
  TError,
  { data: CreateDocumentDto },
  TContext
> => {
  const mutationKey = ['documentControllerCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof documentControllerCreate>>,
    { data: CreateDocumentDto }
  > = (props) => {
    const { data } = props ?? {};

    return documentControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DocumentControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof documentControllerCreate>>
>;
export type DocumentControllerCreateMutationBody = CreateDocumentDto;
export type DocumentControllerCreateMutationError = AxiosError<unknown>;

export const useDocumentControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof documentControllerCreate>>,
      TError,
      { data: CreateDocumentDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof documentControllerCreate>>,
  TError,
  { data: CreateDocumentDto },
  TContext
> => {
  const mutationOptions = getDocumentControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const documentControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/document`, options);
};

export const getDocumentControllerFindAllQueryKey = () => {
  return [`http://localhost:3000/document`] as const;
};

export const getDocumentControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof documentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof documentControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDocumentControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof documentControllerFindAll>>
  > = ({ signal }) => documentControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof documentControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DocumentControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof documentControllerFindAll>>
>;
export type DocumentControllerFindAllQueryError = AxiosError<unknown>;

export function useDocumentControllerFindAll<
  TData = Awaited<ReturnType<typeof documentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof documentControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof documentControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDocumentControllerFindAll<
  TData = Awaited<ReturnType<typeof documentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof documentControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof documentControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDocumentControllerFindAll<
  TData = Awaited<ReturnType<typeof documentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useDocumentControllerFindAll<
  TData = Awaited<ReturnType<typeof documentControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getDocumentControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const documentControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/document/${id}`, options);
};

export const getDocumentControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:3000/document/${id}`] as const;
};

export const getDocumentControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof documentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDocumentControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof documentControllerFindOne>>
  > = ({ signal }) =>
    documentControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof documentControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DocumentControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof documentControllerFindOne>>
>;
export type DocumentControllerFindOneQueryError = AxiosError<unknown>;

export function useDocumentControllerFindOne<
  TData = Awaited<ReturnType<typeof documentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof documentControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof documentControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDocumentControllerFindOne<
  TData = Awaited<ReturnType<typeof documentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof documentControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof documentControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDocumentControllerFindOne<
  TData = Awaited<ReturnType<typeof documentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useDocumentControllerFindOne<
  TData = Awaited<ReturnType<typeof documentControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getDocumentControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const documentControllerUpdate = (
  id: string,
  updateDocumentDto: UpdateDocumentDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(
    `http://localhost:3000/document/${id}`,
    updateDocumentDto,
    options,
  );
};

export const getDocumentControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof documentControllerUpdate>>,
    TError,
    { id: string; data: UpdateDocumentDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof documentControllerUpdate>>,
  TError,
  { id: string; data: UpdateDocumentDto },
  TContext
> => {
  const mutationKey = ['documentControllerUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof documentControllerUpdate>>,
    { id: string; data: UpdateDocumentDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return documentControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DocumentControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof documentControllerUpdate>>
>;
export type DocumentControllerUpdateMutationBody = UpdateDocumentDto;
export type DocumentControllerUpdateMutationError = AxiosError<unknown>;

export const useDocumentControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof documentControllerUpdate>>,
      TError,
      { id: string; data: UpdateDocumentDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof documentControllerUpdate>>,
  TError,
  { id: string; data: UpdateDocumentDto },
  TContext
> => {
  const mutationOptions = getDocumentControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const documentControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`http://localhost:3000/document/${id}`, options);
};

export const getDocumentControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof documentControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof documentControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['documentControllerRemove'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof documentControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return documentControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DocumentControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof documentControllerRemove>>
>;

export type DocumentControllerRemoveMutationError = AxiosError<unknown>;

export const useDocumentControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof documentControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof documentControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDocumentControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const voteControllerCreate = (
  createVoteDto: CreateVoteDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `http://localhost:3000/vote`,
    createVoteDto,
    options,
  );
};

export const getVoteControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof voteControllerCreate>>,
    TError,
    { data: CreateVoteDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof voteControllerCreate>>,
  TError,
  { data: CreateVoteDto },
  TContext
> => {
  const mutationKey = ['voteControllerCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof voteControllerCreate>>,
    { data: CreateVoteDto }
  > = (props) => {
    const { data } = props ?? {};

    return voteControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VoteControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof voteControllerCreate>>
>;
export type VoteControllerCreateMutationBody = CreateVoteDto;
export type VoteControllerCreateMutationError = AxiosError<unknown>;

export const useVoteControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof voteControllerCreate>>,
      TError,
      { data: CreateVoteDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof voteControllerCreate>>,
  TError,
  { data: CreateVoteDto },
  TContext
> => {
  const mutationOptions = getVoteControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const voteControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/vote`, options);
};

export const getVoteControllerFindAllQueryKey = () => {
  return [`http://localhost:3000/vote`] as const;
};

export const getVoteControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof voteControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof voteControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getVoteControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof voteControllerFindAll>>
  > = ({ signal }) => voteControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof voteControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VoteControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof voteControllerFindAll>>
>;
export type VoteControllerFindAllQueryError = AxiosError<unknown>;

export function useVoteControllerFindAll<
  TData = Awaited<ReturnType<typeof voteControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof voteControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteControllerFindAll<
  TData = Awaited<ReturnType<typeof voteControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof voteControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteControllerFindAll<
  TData = Awaited<ReturnType<typeof voteControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useVoteControllerFindAll<
  TData = Awaited<ReturnType<typeof voteControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getVoteControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const voteControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/vote/${id}`, options);
};

export const getVoteControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:3000/vote/${id}`] as const;
};

export const getVoteControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof voteControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getVoteControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof voteControllerFindOne>>
  > = ({ signal }) => voteControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof voteControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VoteControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof voteControllerFindOne>>
>;
export type VoteControllerFindOneQueryError = AxiosError<unknown>;

export function useVoteControllerFindOne<
  TData = Awaited<ReturnType<typeof voteControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof voteControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteControllerFindOne<
  TData = Awaited<ReturnType<typeof voteControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof voteControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof voteControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useVoteControllerFindOne<
  TData = Awaited<ReturnType<typeof voteControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useVoteControllerFindOne<
  TData = Awaited<ReturnType<typeof voteControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof voteControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getVoteControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const voteControllerUpdate = (
  id: string,
  updateVoteDto: UpdateVoteDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(
    `http://localhost:3000/vote/${id}`,
    updateVoteDto,
    options,
  );
};

export const getVoteControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof voteControllerUpdate>>,
    TError,
    { id: string; data: UpdateVoteDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof voteControllerUpdate>>,
  TError,
  { id: string; data: UpdateVoteDto },
  TContext
> => {
  const mutationKey = ['voteControllerUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof voteControllerUpdate>>,
    { id: string; data: UpdateVoteDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return voteControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VoteControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof voteControllerUpdate>>
>;
export type VoteControllerUpdateMutationBody = UpdateVoteDto;
export type VoteControllerUpdateMutationError = AxiosError<unknown>;

export const useVoteControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof voteControllerUpdate>>,
      TError,
      { id: string; data: UpdateVoteDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof voteControllerUpdate>>,
  TError,
  { id: string; data: UpdateVoteDto },
  TContext
> => {
  const mutationOptions = getVoteControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const voteControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`http://localhost:3000/vote/${id}`, options);
};

export const getVoteControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof voteControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof voteControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['voteControllerRemove'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof voteControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return voteControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VoteControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof voteControllerRemove>>
>;

export type VoteControllerRemoveMutationError = AxiosError<unknown>;

export const useVoteControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof voteControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof voteControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getVoteControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const announcementControllerCreate = (
  createAnnouncementDto: CreateAnnouncementDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `http://localhost:3000/announcement`,
    createAnnouncementDto,
    options,
  );
};

export const getAnnouncementControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof announcementControllerCreate>>,
    TError,
    { data: CreateAnnouncementDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof announcementControllerCreate>>,
  TError,
  { data: CreateAnnouncementDto },
  TContext
> => {
  const mutationKey = ['announcementControllerCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof announcementControllerCreate>>,
    { data: CreateAnnouncementDto }
  > = (props) => {
    const { data } = props ?? {};

    return announcementControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnnouncementControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof announcementControllerCreate>>
>;
export type AnnouncementControllerCreateMutationBody = CreateAnnouncementDto;
export type AnnouncementControllerCreateMutationError = AxiosError<unknown>;

export const useAnnouncementControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof announcementControllerCreate>>,
      TError,
      { data: CreateAnnouncementDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof announcementControllerCreate>>,
  TError,
  { data: CreateAnnouncementDto },
  TContext
> => {
  const mutationOptions =
    getAnnouncementControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const announcementControllerFindAll = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/announcement`, options);
};

export const getAnnouncementControllerFindAllQueryKey = () => {
  return [`http://localhost:3000/announcement`] as const;
};

export const getAnnouncementControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof announcementControllerFindAll>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof announcementControllerFindAll>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAnnouncementControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof announcementControllerFindAll>>
  > = ({ signal }) =>
    announcementControllerFindAll({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof announcementControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnnouncementControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof announcementControllerFindAll>>
>;
export type AnnouncementControllerFindAllQueryError = AxiosError<unknown>;

export function useAnnouncementControllerFindAll<
  TData = Awaited<ReturnType<typeof announcementControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof announcementControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof announcementControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAnnouncementControllerFindAll<
  TData = Awaited<ReturnType<typeof announcementControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof announcementControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof announcementControllerFindAll>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAnnouncementControllerFindAll<
  TData = Awaited<ReturnType<typeof announcementControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAnnouncementControllerFindAll<
  TData = Awaited<ReturnType<typeof announcementControllerFindAll>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindAll>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAnnouncementControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const announcementControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(`http://localhost:3000/announcement/${id}`, options);
};

export const getAnnouncementControllerFindOneQueryKey = (id: string) => {
  return [`http://localhost:3000/announcement/${id}`] as const;
};

export const getAnnouncementControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof announcementControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAnnouncementControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof announcementControllerFindOne>>
  > = ({ signal }) =>
    announcementControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof announcementControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnnouncementControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof announcementControllerFindOne>>
>;
export type AnnouncementControllerFindOneQueryError = AxiosError<unknown>;

export function useAnnouncementControllerFindOne<
  TData = Awaited<ReturnType<typeof announcementControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof announcementControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof announcementControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAnnouncementControllerFindOne<
  TData = Awaited<ReturnType<typeof announcementControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof announcementControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof announcementControllerFindOne>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAnnouncementControllerFindOne<
  TData = Awaited<ReturnType<typeof announcementControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAnnouncementControllerFindOne<
  TData = Awaited<ReturnType<typeof announcementControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof announcementControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAnnouncementControllerFindOneQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const announcementControllerUpdate = (
  id: string,
  updateAnnouncementDto: UpdateAnnouncementDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(
    `http://localhost:3000/announcement/${id}`,
    updateAnnouncementDto,
    options,
  );
};

export const getAnnouncementControllerUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof announcementControllerUpdate>>,
    TError,
    { id: string; data: UpdateAnnouncementDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof announcementControllerUpdate>>,
  TError,
  { id: string; data: UpdateAnnouncementDto },
  TContext
> => {
  const mutationKey = ['announcementControllerUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof announcementControllerUpdate>>,
    { id: string; data: UpdateAnnouncementDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return announcementControllerUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnnouncementControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof announcementControllerUpdate>>
>;
export type AnnouncementControllerUpdateMutationBody = UpdateAnnouncementDto;
export type AnnouncementControllerUpdateMutationError = AxiosError<unknown>;

export const useAnnouncementControllerUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof announcementControllerUpdate>>,
      TError,
      { id: string; data: UpdateAnnouncementDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof announcementControllerUpdate>>,
  TError,
  { id: string; data: UpdateAnnouncementDto },
  TContext
> => {
  const mutationOptions =
    getAnnouncementControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const announcementControllerRemove = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(
    `http://localhost:3000/announcement/${id}`,
    options,
  );
};

export const getAnnouncementControllerRemoveMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof announcementControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof announcementControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['announcementControllerRemove'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof announcementControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return announcementControllerRemove(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnnouncementControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof announcementControllerRemove>>
>;

export type AnnouncementControllerRemoveMutationError = AxiosError<unknown>;

export const useAnnouncementControllerRemove = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof announcementControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof announcementControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAnnouncementControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
